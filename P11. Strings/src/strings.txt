
public class Subsequence{
    public static void main(String[] args){

        String s1 = "geeksforgeeks";
        String s2 = "grges";
        
        System.out.println(checkSequence(s1,s2));

        // Time complexity: O(n+m) && space complexity: O(1)

        int n=s1.length();
        int m=s2.length();
        System.out.println(checkSequenceRecursive(s1,s2, n, m));

        // Time complexity: O(n+m) && space complexity: O(n+m)


    }

    public static boolean checkSequence(String s1, String s2){

        int n=s1.length();
        int m=s2.length();
        int j=0;

        if(m<n){
            return false;
        }

        for(int i=0; i<n && j<m; i++){
            if(s1.charAt(i)==s2.charAt(j)){
                j++;
            }
        }
        return (j==m);
    }

    public static boolean checkSequenceRecursive(String s1, String s2, int n, int m){



        if(m==0)
            return true;

        if(n==0)
            return false;

        if(s1.charAt(n-1)==s2.charAt(m-1)){
            return checkSequenceRecursive(s1, s2, n-1, m-1);
        }else{
            return checkSequenceRecursive(s1, s2, n-1, m);
        }                        

    }
}



import java.util.Arrays;

public class Anagrams{
    public static void main(String[] args){

        String s1 = "listen";
        String s2 = "silent";

        System.out.println(checkAnagrams(s1, s2));
        
        // Time complexity: O(nlog(n)) && space complexity: O(1)


    }

    public static boolean checkAnagrams(String s1, String s2){

        int n=s1.length();
        int m=s2.length();

        if(n != m){
            return false;
        }

        char[] a1 = s1.toCharArray();
        Arrays.sort(a1);
        s1 = new String(a1);

        char[] a2 = s2.toCharArray();
        Arrays.sort(a2);
        s2 = new String(a2);

        return s1.equals(s2);
    }
}



public class LeftmostRepeatingChar{
    public static void main(String[] args){

        String str = "acbbad";

        System.out.println(leftmost(str));
        // Time complexity: O(n^2) && space complexity: O(1)

        System.out.println(leftmost1(str));
        // Time complexity: O(n) && space complexity: O(1)

        System.out.println(leftMost(str));
        // Time complexity: O(n+CHAR) && space complexity: O(CHAR)

    }

    public static int leftmost(String str){
        for(int i=0; i<str.length(); i++){
            for(int j=i+1; j<str.length(); j++){
                if(str.charAt(i) == str.charAt(j)){
                    return i;
                }
            }
        }
        return -1;
    }

    static final int CHAR=256;

    public static leftmost1(String str){

        int[] count = new count[CHAR];
        for(int i=0; i<str.length(); i++){
            count[str.charAt(i)]++;
        }
        for(int i=0; i<str.length(); i++){
            if(count[str.charAt(i)] > 1){
                return 1;
            }
        }
        return -1;
    }

    // static final int CHAR = 256;

    public static int leftMost(String str) {

        int[] fIndex = new int[CHAR];
        Arrays.fill(fIndex, -1);
        int res = Integer.MAX_VALUE;

        for (int i = 0; i < str.length(); i++) {

            int fi = fIndex[str.charAt(i)];

            if (fi == -1)
                fIndex[str.charAt(i)] = i;
            else
                res = Math.min(res, fi);
        }
         return (res == Integer.MAX_VALUE) ? -1 : res;
    }

}


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

public class LeftmostNonrepeatingChar{
    public static void main(String[] args){

        String str = "geeksforgeeks";
        System.out.println(nonRepeating(str));

        //Time complexity: O(n^2)

    }


    public static int nonRepeating(String str){

        for(int i=0; i<str.length(); i++){

            boolean flag = false;

            for(int j=0; j<str.length(); j++){
                if(i!=j && str.charAt(i) == str.charAt(j)){
                    flag=true;
                    break;
                }
            }
            if(flag==false){
                return i;
            }
        }
        return -1;
    }


    //Better solution 


    static final int CHAR = 256;

    public static int nonRep(String str) {

        int[] count = new int[CHAR];

        for(int i = 0; i < str.length(); i++) {

            count[str.charAt(i)]++;
        }
        for(int i = 0; i < str.length(); i++) {
            
            if(count[str.charAt(i)] == 1)
                return i;
        }
        return -1;
    }

}


